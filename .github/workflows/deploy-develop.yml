name: Deploy Frontend to S3 (develop)

on:
  pull_request:
    types: [closed]
    branches: [develop]
  workflow_dispatch:

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: read

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.S3_BUCKET_STAGING }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Prepare env (development)
        run: node scripts/setup-env.js dev

      - name: Disable middleware for static export (safety)
        run: |
          if [ -f middleware.ts ]; then
            echo "Temporarily disabling middleware for export"
            mv middleware.ts middleware.disabled.ts
          fi

      - name: Build static site (Next 15)
        run: pnpm build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync to S3 (staging)
        run: |
          # Next 15 with output: 'export' writes to .next/static and .next/app with an export dir at .next/standalone or .next/export
          # Prefer .next/export if exists; else fall back to out/
          exportDir=".next/export"
          if [ -d "$exportDir" ]; then
            aws s3 sync "$exportDir" s3://$S3_BUCKET --delete
          elif [ -d "out" ]; then
            aws s3 sync ./out s3://$S3_BUCKET --delete
          else
            echo "Export directory not found" && exit 1
          fi

      - name: Invalidate CloudFront cache (staging)
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*"
